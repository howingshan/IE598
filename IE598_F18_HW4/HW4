#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep 22 01:32:45 2019

@author: howingshan
"""

import sys
import csv
import numpy as np
import pandas as pd


df = pd.read_csv('/Users/howingshan/Desktop/2019FALL/IE598/HW4/housing2.csv')
df.shape
df.head()
summary = df.describe()
print(summary)
columns=df.columns[13:27]
#visualization
#heatmap
cm = np.corrcoef(df[columns].values.T)
hm = sns.heatmap(cm,
                 cbar=True,
                 annot=True,
                 square=True,
                 fmt='.2f',
                 annot_kws={'size': 8},
                 yticklabels=columns,
                 xticklabels=columns)

plt.tight_layout()
plt.show()
#seaborn
import matplotlib.pyplot as plt
import seaborn as sns
cols = ['DIS', 'RAD', 'NOX', 'MEDV','PTRATIO']

sns.pairplot(df[cols], size=2.5)
plt.tight_layout()
plt.show()
#heatmap
cm = np.corrcoef(df[cols].values.T)
hm = sns.heatmap(cm,
                 cbar=True,
                 annot=True,
                 square=True,
                 fmt='.2f',
                 annot_kws={'size': 8},
                 yticklabels=cols,
                 xticklabels=cols)

plt.tight_layout()
plt.show()
#percentile
for i in range(0,5):
    percentiles = np.array([0, 25, 50, 75, 100])
    p= np.percentile(df[cols].iloc[:,i], percentiles)
    sys.stdout.write("\n4 Equal Percentiles   "+df[cols].columns[i]+'\n')
    print(p)
    
#split data
from sklearn.model_selection import train_test_split
df=df.dropna()
X=df.drop('MEDV',1).values
m=['MEDV']
y=df[m].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)


#LIner regression
from sklearn.linear_model import LinearRegression
reg_all = LinearRegression()
reg_all.fit(X_train,y_train)
y_train_pred = reg_all.predict(X_train)
y_test_pred = reg_all.predict(X_test)
plt.scatter(y_train_pred, y_train_pred - y_train, c='pink',label='train')
plt.scatter(y_test_pred, y_test_pred - y_test, c='green',label='test')
plt.xlabel('Predicted values')
plt.ylabel('Residuals Error')
plt.title('Linear Regression')
plt.legend(loc='upper left')
plt.hlines(0, 0, 50,color="black")
plt.figure()
plt.show()
#coef,y intercept
coef_linear=reg_all.coef_
inter_linear=reg_all.intercept_
print("Coefficients of linear regression is: ",coef_linear)
print("Y intercept of linear regression is: ",inter_linear)
#MSE,R2
from sklearn.metrics import mean_squared_error
mse_linear=mean_squared_error(y_test,y_test_pred)
r2_linear=reg_all.score(X_test,y_test)
print("MSE of linear regression is: ",mse_linear)
print("R2 of linear regression is: ",r2_linear)

#ridge regression
from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score
mse_ridge=[]
r2_ridge=[]
for i in range (0,30):
    ridge = Ridge(alpha=i)
    ridge.fit(X_train,y_train)
    y_train_pred = ridge.predict(X_train)
    y_test_pred = ridge.predict(X_test)
    mse_ridge.append(mean_squared_error(y_test,y_test_pred))
    r2_ridge.append(ridge.score(X_test,y_test))

plt.plot(mse_ridge)
plt.xlabel('alpha')
plt.ylabel('MSE')
plt.title('Ridge Regression')
plt.show()

plt.plot(r2_ridge)
plt.xlabel('alpha')
plt.ylabel('R2')
plt.title('Ridge Regression')
plt.show()
#different alpha
#alpha=1
ridge = Ridge(alpha=1)
ridge.fit(X_train,y_train)
y_train_pred = ridge.predict(X_train)
y_test_pred = ridge.predict(X_test)
plt.scatter(y_train_pred, y_train_pred - y_train, c='pink',label='train')
plt.scatter(y_test_pred, y_test_pred - y_test, c='green',label='test')
plt.xlabel('Predicted values')
plt.ylabel('Residuals Error')
plt.title('Ridge Regression(alpha=1)')
plt.legend(loc='upper left')
plt.hlines(0, 0, 50,color="black")
plt.figure()
plt.show()
#coef,y intercept
coef_ridge1=ridge.coef_
inter_ridge1=ridge.intercept_
print("Coefficients of ridge regression(alpha=1) is: ",coef_ridge1)
print("Y intercept of ridge regression(alpha=1) is: ",inter_ridge1)
#MSE,R2
mse_ridge1=mean_squared_error(y_test,y_test_pred)
r2_ridge1=ridge.score(X_test,y_test)
print("MSE of ridge regression(alpha=1) is: ",mse_ridge1)
print("R2 of ridge regression(alpha=1) is: ",r2_ridge1)

#alph=10
ridge = Ridge(alpha=10)
ridge.fit(X_train,y_train)
y_train_pred = ridge.predict(X_train)
y_test_pred = ridge.predict(X_test)
plt.scatter(y_train_pred, y_train_pred - y_train, c='pink',label='train')
plt.scatter(y_test_pred, y_test_pred - y_test, c='green',label='test')
plt.xlabel('Predicted values')
plt.ylabel('Residuals Error')
plt.title('Ridge Regression(alpha=10)')
plt.legend(loc='upper left')
plt.hlines(0, 0, 50,color="black")
plt.figure()
plt.show()
#coef,y intercept
coef_ridge10=ridge.coef_
inter_ridge10=ridge.intercept_
print("Coefficients of ridge regression(alpha=10) is: ",coef_ridge10)
print("Y intercept of ridge regression(alpha=10) is: ",inter_ridge10)
#MSE,R2
mse_ridge10=mean_squared_error(y_test,y_test_pred)
r2_ridge10=ridge.score(X_test,y_test)
print("MSE of ridge regression(alpha=10) is: ",mse_ridge10)
print("R2 of ridge regression(alpha=10) is: ",r2_ridge10)

from sklearn.model_selection import cross_val_predict
predicted = cross_val_predict(ridge, X, y, cv=10)
# 用scikit-learn计算MSE
best_mse=mean_squared_error(y, predicted)
print("Best MSE is: ",best_mse)


#Lasso regression
from sklearn.linear_model import Lasso
mse_lasso=[]
r2_lasso=[]
for i in range (0,30):
    lasso = Lasso(alpha=i)
    lasso.fit(X_train,y_train)
    y_train_pred = lasso.predict(X_train)
    y_test_pred = lasso.predict(X_test)
    mse_lasso.append(mean_squared_error(y_test,y_test_pred))
    r2_lasso.append(lasso.score(X_test,y_test))

plt.plot(mse_lasso)
plt.xlabel('alpha')
plt.ylabel('MSE')
plt.title('Lasso Regression')
plt.show()

plt.plot(r2_lasso)
plt.xlabel('alpha')
plt.ylabel('R2')
plt.title('Lasso Regression')
plt.show()

#different alpha
#alpha=1
lasso = Lasso(alpha=1)
lasso.fit(X_train,y_train)
y_train_pred1 = lasso.predict(X_train)
y_test_pred1 = lasso.predict(X_test)
x=np.linspace(5,50,40)
y=x
plt.scatter(y_train_pred1, y_train, c='pink',label='train')
plt.scatter(y_test_pred1, y_test, c='green',label='test')
plt.xlabel('Predicted values')
plt.ylabel('Residuals Error')
plt.plot(x,y,c='black')
plt.title('Lasso Regression(alpha=1)')
plt.legend(loc='upper left')
#plt.hlines(0, 0, 50,color="black")
plt.figure()
plt.show()
#coef,y intercept
coef_lasso1=lasso.coef_
inter_lasso1=lasso.intercept_
print("Coefficients of lasso regression(alpha=1) is: ",coef_lasso1)
print("Y intercept of lasso regression(alpha=1) is: ",inter_lasso1)
#MSE,R2
mse_lasso1=mean_squared_error(y_test,y_test_pred)
r2_lasso1=lasso.score(X_test,y_test)
print("MSE of lasso regression(alpha=1) is: ",mse_lasso1)
print("R2 of lasso regression(alpha=1) is: ",r2_lasso1)

#alpha=10
lasso = Lasso(alpha=10)
lasso.fit(X_train,y_train)
y_train_pred = lasso.predict(X_train)
y_test_pred = lasso.predict(X_test)
x=np.linspace(5,50,40)
y=x
plt.scatter(y_train_pred10, y_train, c='pink',label='train')
plt.scatter(y_test_pred10, y_test, c='green',label='test')
plt.xlabel('Predicted values')
plt.ylabel('Residuals Error')
plt.plot(x,y,c='black')
plt.title('Lasso Regression(alpha=10)')
plt.legend(loc='upper left')
#plt.hlines(0, 0, 50,color="black")
plt.figure()
plt.show()
#coef,y intercept
coef_lasso10=lasso.coef_
inter_lasso10=lasso.intercept_
print("Coefficients of lasso regression(alpha=10) is: ",coef_lasso10)
print("Y intercept of lasso regression(alpha=10) is: ",inter_lasso10)
#MSE,R2
mse_lasso10=mean_squared_error(y_test,y_test_pred)
r2_lasso10=lasso.score(X_test,y_test)
print("MSE of lasso regression(alpha=10) is: ",mse_lasso10)
print("R2 of lasso regression(alpha=10) is: ",r2_lasso10)

predicted = cross_val_predict(lasso, X, y, cv=10)
# 用scikit-learn计算MSE
best_mse2=mean_squared_error(y, predicted)
print("Best MSE is: ",best_mse2)

mse=[mse_linear,mse_ridge1,mse_lasso1]
r2=[r2_linear,r2_ridge1,r2_lasso1]
name=['Linear Regression','Ridge Regression','Lasso Regression']

print(name)
print(mse)
print(r2)



print("My name is {Yingshan He}")
print("My NetID is: {yh29}")
print("I hereby certify that I have read the University policy on Academic Integrity and that I am not in violation.")
